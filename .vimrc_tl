set nocompatible
scriptencoding utf-8
filetype off " required 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/.vim/bundle/')
"
Plugin 'VundleVim/Vundle.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'scrooloose/nerdtree'
" Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'vim-scripts/Vim-R-plugin'
Plugin 'benmills/vimux'
" Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'othree/html5.vim'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
" Plugin 'Yggdroot/indentLine'
Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'edkolev/promptline.vim'
Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'ervandew/supertab'
" Plugin 'vim-scripts/AutoComplPop'

" Plugin 'vim-ruby/vim-ruby'
" Plugin 'tpope/vim-rails'

Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-endwise'

" REACT PLUGINS
Plugin 'epilande/vim-react-snippets'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx' "allow jsx in normal JS files added let g:jsx...
Plugin 'mattn/emmet-vim'
Plugin 'w0rp/ale' "Asynchronous Lint Engine
Plugin 'skywind3000/asyncrun.vim'
" Plugin 'jacoborus/tender'
" Plugin 'easymotion/vim-easymotion'

" Plugin 'morhetz/gruvbox'
Plugin 'tyrannicaltoucan/vim-deep-space'
"Plugin 'vim-scripts/Conque-Shell'
"
" Plugin 'flazz/vim-colorschemes'
" Plugin 'mhartington/oceanic-next'
" Plugin 'bling/vim-bufferline'
" Plugin 'Raimondi/delimitMate'
" Plugin 'jiangmiao/auto-pairs'

Plugin 'terryma/vim-smooth-scroll'
" Plugin 'terryma/vim-multiple-cursors'
" Plugin 'qpkorr/vim-bufkill'
" let Vundle manage Vundle, required
" Plugin 'scrooloose/Syntastic'
" Track the engine.
" Track the engine.
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'sheerun/vim-polyglot'
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate'
", { 'do': ':UpdateRemotePlugins' }
" Plugin 'easymotion/vim-easymotion'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}
" All of your Plugins must be added before the following line
call vundle#end()      " required
" filetype plugin indent on 
" To ignore plugin indent changes, instead use:
filetype plugin on 

func! vundle#end(...) abort
  if (exists("g:vundle_lazy_load"))
    unlet g:vundle_lazy_load
  endif
  call vundle#config#activate_bundles()
endf
"" Brief help
" :PluginList   - lists configured plugins
" :PluginInstall  - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean    - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible
" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"
set termguicolors

" Enable omni completion.
autocmd FileType * setlocal omnifunc=syntaxcomplete#Complete
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby let g:SuperTabDefaultCompletionType = "context"
" Enable heavy omni completion.
"
" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
if has("syntax")
  syntax on
endif
" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" Uncomment the following to have Vim jump to the last position when
" reopening a file
" if has("autocmd")
"   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" endif
" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif
" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd    " Show (partial) command in status line.
" set showmatch    " Show matching brackets. 
"set ignorecase   " Do case insensitive matching
" set smartcase    " Do smart case matching
"set incsearch    " Incremental search
" set autowrite    " Automatically save before commands like :next and :make
"
set hlsearch
" <leader>c redraws the screen and removes any search highlighting.
nnoremap <leader>c :nohl<CR>

set hidden   " Hide buffers when they are abandoned
" set mouse=a    " Enable mouse usage (all modes)
"MY CONFIGS HERE
"FOR THE LOOKS LOL
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""FOR eruby.vim"""""""""""""""""""""
"let b:surround_{char2nr('=')} = "<%= \r %>"
"let b:surround_{char2nr('-')} = "<% \r %>"
"""""""""""""""""""""FOR eruby.vim"""""""""""""""""""""
"""""""""""""""rvm implode, then reinstall jekyll with gem install jekyll
"let mapleader = ","
"globals
" let g:snipMate = {}
" let g:snipMate.scope_aliases = {}
" let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails,ruby-1.9'
"
" let g:delimitMate_expand_space = 1
" let g:delimitMate_expand_cr = 1
" let g:delimitMate_jump_expansion = 1
" let g:delimitMate_balance_matchpairs = 1
" set autoindent
" set smartindent
inoremap {<CR> {<CR>}<C-o>O<TAB>

let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_start_length=1

let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'
" autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 0
" autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
" autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
" autocmd FileType ruby compiler ruby



" make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'
 
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'


" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-y>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" lugin 'file:///home/gmarik/path/to/plugiu'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible


" If using a dark background within the editing area and syntax highlighting
" turn on this option as well

let g:jsx_ext_required = 0 " Allow JSX in normal JS files

autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 0
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType javascript UltiSnipsAddFiletypes html
autocmd FileType ruby compiler ruby
set omnifunc=syntaxcomplete#Complete
set laststatus=2
"
"
"
"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:closetag_filenames = "*.erb,*.html.erb,*.html,*.xhtml,*.phtml,*.js"
"let g:Powerline_symbols = 'fancy'
set number
set relativenumber
"""""""""""""""""""""""""""""""""""""""""""

" save automatically when text is changed
" set updatetime=200
" au CursorHold * silent! update

"solarized theme here
"/Users/Whisky/.vim/bundle/vim-airline-themes/autoload/airline/themes
"let g:promptline_theme = 'airline'
" let g:airline_theme='gruvbox'
"let g:airline_theme='gruvbox'
"let g:solarized_termcolors=256

" set guicolors
" set termguicolors
" let g:gruvbox_italicize_comments=1
" let g:gruvbox_italic=1
" colorscheme onehalflight
"
"
" syntax on
set cursorline
" if (has("termguicolors"))
"  set termguicolors
" endif
"
" colorscheme tender
" let g:airline_theme = 'tender'
colorscheme deep-space
" enable tender airline theme
" let g:tender_airline = 1
" set airline theme
" let g:airline_theme = 'base16_londontube'
" colorscheme melanite
" let g:airline_theme='onehalfdark'
" let g:airline_theme='onehalfdark'
" colorscheme gruvbox
" set background=dark
" let g:gruvbox_contrast_dark="hard"
" let g:gruvbox_number_column="red"
" colorscheme deep-space
" let g:airline_theme='base16_isotope'
let g:airline_theme='deep_space'
"colorscheme solarized
"hi Normal ctermbg=none
"hi Normal ctermbg=none

"set cursorline
" hi CursorLine cterm=bold ctermbg=8 ctermfg=NONE

" hi Comment  guifg=#80a0ff ctermfg=7


"hi CursorLine	 cterm=NONE ctermbg=8 ctermfg=white
"hi CursorLine term=bold cterm=bold guibg=Grey40
"autocmd InsertEnter * highlight CursorLine guibg=#000050 guifg=fg
"autocmd InsertLeave * highlight CursorLine guibg=#004000 guifg=fg
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:indentLine_concealcursor = 'vc' "(default 'inc')
"let g:indentLine_conceallevel = 0 "(default 2)

"let g:indentLine_color_term = 15
"
let g:indentLine_color_term = 8
let g:indentLine_char ='│'
" let g:indentLine_char ='┋'
highlight Visual cterm=NONE ctermbg=8 ctermfg=NONE guibg=Grey40
"set listchars=tab:❯\  
"set listchars=eol:↲ ┆¦┊
"set listchars=tab:❯\ ,eol:↲ 
"set listchars=tab:⇁\ ,eol:┘

" emmet set up
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

" Ale set up
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file

" reformat automatically with asyncrun
autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %

" set autoindent
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set ai "Auto indent
set si "Smart indentvim
set wrap "wrap lines
"retab!

"set showbreak=↪\ 
"set listchars=tab:→\ ,eol:↲ ,nbsp:␣,trail:•,extends:⟩,precedes:⟨
"""""""""""""""""""""""""""""""""""""""""""
":so $VIMRUNTIME/syntax/hitest.vim
"autocmd CursorMoved * exe printf('match Todo  /\V\<%s\>/', escape(expand('<cword>'), '/\'))
"autocmd CursorMoved * exe printf('match Todo  /\V\<%s\>/', escape(expand('<cword>'), '/\'))
set backspace=indent,eol,start
set clipboard=unnamed

"save
inoremap ß <ESC>:w <CR>

"tab completion
" function! Tab_Or_Complete()
"   if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
"     return "\<C-N>"
"   else
"     return "\<Tab>"
"   endif
" endfunction
" inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
" inoremap <S-Tab> <C-P>


nnoremap <Tab> :bn!<CR>
nnoremap <S-Tab> :bp!<CR>
"nnoremap <hhhhhhhh> :BD<CR>
"nnoremap œ :BD<CR>
nnoremap <leader>q :bp<cr>:bd #<cr>
" nmap <C-w>n :NERDTreeToggle<cr>
nmap <leader>n :NERDTreeToggle<cr>

"nnoremap <silent>  ˙ :TmuxNavigateLeft<cr>
"nnoremap <silent>  ∆ :TmuxNavigateDown<cr>
"nnoremap <silent>  ˚ :TmuxNavigateUp<cr>
"nnoremap <silent>  ¬ :TmuxNavigateRight<cr>
"nnoremap <silent>  « :TmuxNavigatePrevious<cr>
"nnoremap ˙ <C-W>h
"nnoremap ∆ <C-W>j
"nnoremap ˚ <C-W>k
"nnoremap ¬ <C-W>l
"COPYING INTO REGISTERS
nnoremap ; :
vnoremap a "jy
vnoremap z "ky
vnoremap x "ly
nnoremap å "jp
nnoremap Ω "kp
nnoremap ≈ "lp

inoremap ˙ <C-o>h
inoremap ∆ <C-o>gj
inoremap ˚ <C-o>gk
inoremap ¬ <C-o>l
inoremap ∑ <C-o>w
inoremap ∫ <C-o>b

inoremap … <ESC>
vnoremap … <ESC>
cnoremap … <ESC>
nnoremap j gj
nnoremap k gk
"inoremap <Up> <ESC>kddpkA
nnoremap <Up> kddpk
"inoremap <Down> <ESC>ddpA
nnoremap <Down> ddp
"nnoremap <Right> xp
"Add line without insert mode
nnoremap <CR> o<ESC>

function! P_Compile()
	let i =  expand('%:e')
	if ( i == "rb" )
		let c =  " ruby " .expand('%:p') 
		return c
  elseif ( i == 'js' )
    let c =  " node " .expand('%:p')
    return c
	else
		let c = " echo lol no compiler found "
		return c
	endif
endfunc
nnoremap <leader>q :bp<cr>:bd #<cr>

let g:NERDTreeWinSize = 30
" hi Directory guifg=#82a2f0 ctermfg=red


"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"open a NERDTree automatically when vim starts up 
"autocmd vimenter * NERDTree
"
" open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"disable :bd in the NERDTree buffer
autocmd FileType nerdtree cnoreabbrev <buffer> bd <nop>

autocmd VimEnter * NERDTree | wincmd p

function! NumberToggle()
if(&relativenumber == 1)
	set relativenumber!
  else
	set relativenumber
  endif
endfunc

"Smooth scrool
"let me see the plugin on google chrome
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>


"nnoremap ø <CR> <c-w>h
nnoremap <leader>z :call NumberToggle()<cr>
nmap <leader>x	:w \| call VimuxRunCommand(P_Compile()) <CR>
"commented out below
" nmap <leader>w	:w \| call VimuxRunCommand(K_Compile()) <CR>
"VIMUX plugin is required for the following functions

" nmap <leader>dd 	:w \| call VimuxRunCommand("bundle install") <CR>
" nmap <leader>rf 	:w \| call VimuxRunCommand("rspec --f-f") <CR>
" nmap <leader>rs 	:w \| call VimuxRunCommand("rspec") <CR>
" nmap <leader>ras  :w \| call VimuxRunCommand("rails s") <CR>
" nmap <leader>rac  :w \| call VimuxRunCommand("rails c") <CR>
" nmap <leader>Q  	:w \| call VimuxRunCommand("rspec " .expand('%:p:h'). "/../spec/*" .expand('%:t:r')."*") <CR>
" nmap <leader>1q	:w \| call VimuxRunCommand(" rspec " .expand('%:p:h'). "/../spec/*" .expand('%:t:r')."* --f-f") <CR>
" nmap <leader>1s	  :w \| call VimuxRunCommand("rspec" .expand('%:p'). ":".line('.')) <CR>

"insert mode hjkl
"run 2 commands below in terminal for nvim. for vim it's not neccessary
"infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
"tic $TERM.ti
imap <C-h> <left>
imap <C-j> <down>
imap <C-i> <up>
imap <C-l> <right>
nnoremap <C-z> a

" open file in the browser
nmap  ∫ :w \| call VimuxRunCommand(" open " .expand('%:p')) <CR>

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
" if has('nvim')
"   nmap <bs> :<c-u>TmuxNavigateLeft<cr>
" endif

" if has('nvim')
"   nmap <BS> <C-W>h
" endif

      " \'win'  : ['#I',  '#(basename #{pane_current_path})'],
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I',  '#W'],
      \'cwin' : ['#I', '#(basename #{pane_current_path})', '#F'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}
